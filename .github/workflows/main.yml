name: Build libvpx

on: workflow_dispatch

jobs:
  build:
    strategy:
      matrix:
        include:
          - TARGET: linux
            os: ubuntu-22.04
          - TARGET: macos
            os: macos-11
          - TARGET: windows
            os: windows-2022
    
    runs-on: ${{ matrix.os }}
    
    defaults:
      run:
        shell: ${{ matrix.TARGET == 'windows' && 'msys2 {0}' || 'bash' }}
    
    steps:
      - uses: actions/checkout@v2
        with:
          repository: webmproject/libvpx

      - name: Install msys2
        uses: msys2/setup-msys2@v2
        if: matrix.TARGET == 'windows'

      - name: Check shell
        run: uname -s
      
      - name: Install dependencies (macOS)
        if: matrix.TARGET == 'macos'
        run: brew install yasm
        
      - name: Install dependencies (Linux)
        if: matrix.TARGET == 'linux'
        run: sudo apt install yasm

      - name: Install dependencies (Windows)
        if: matrix.TARGET == 'windows'
        run: pacman -S --noconfirm diffutils make yasm mingw-w64-x86_64-gcc
        
      - name: Create build dir
        run: mkdir build-output
        
      - name: Configure build
        run: cd build-output && ../configure --disable-examples --disable-tools --disable-docs --enable-vp9-decoder --enable-vp8-decoder --disable-vp8-encoder --disable-vp9-encoder --disable-unit-tests

      - name: Check yasm availability
        run: cd build-output && ls && yasm --version

      - name: Build
        run: cd build-output && make -j2
        
      - name: Upload temporary artifact (Linux/macOS)
        if: matrix.TARGET != 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.TARGET }}
          path: build-output/libvpx.a
          
      - name: Debug
        run: ls
          
      - name: Upload temporary artifact (Windows)
        if: matrix.TARGET == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.TARGET }}
          path: build-output/vpx.lib
          
  release:
    runs-on: ubuntu-22.04
    name: Publish artifacts to GitHub Releases
    needs: [build]
  
    steps:
      - name: Get tag name
        id: get_tag
        run: echo ::set-output name=TAG::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          release_name: Release ${{ steps.get_tag.outputs.TAG }}
        
      - name: Download Linux build
        uses: actions/download-artifact@v1
        with:
          name: linux

      - name: Download macOS build
        uses: actions/download-artifact@v1
        with:
          name: macos
          
      - name: Download Windows build
        uses: actions/download-artifact@v1
        with:
          name: windows
          
      - name: Upload macOS package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos/libvpx.a
          asset_name: libvpx-macos.a
          asset_content_type: application/x-binary
          
      - name: Upload Linux package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux/libvpx.a
          asset_name: libvpx-linux.a
          asset_content_type: application/x-binary
          
      - name: Upload Windows package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows/vpx.lib
          asset_name: libvpx-windows.lib
          asset_content_type: application/x-binary
